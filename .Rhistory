shiny::runApp()
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
runApp()
shiny::runApp()
shiny::runApp()
library(shiny); runApp('peteapp.R')
system(paste("fc", "app.R", "peteapp.R", "> difference.txt"))
shiny::runApp()
runApp()
runApp()
runApp()
#install.packages('rsconnect')
library(rsconnect)
setwd("C:/Users/hannesrosenbusch/Documents/introducing conjoint")
rsconnect::setAccountInfo(name='rosenbusch',
token='AE3BBCC32B976AD16AA02B48CC7236DA',
secret='kBV5TmoWia6b4bk/kQGyy9sKghNVXz2f+3aBYiLx')
rsconnect::deployApp('conjoint app')
runApp('conjoint app')
#install.packages('rsconnect')
library(rsconnect)
setwd("C:/Users/hannesrosenbusch/Documents/introducing conjoint")
rsconnect::setAccountInfo(name='rosenbusch',
token='AE3BBCC32B976AD16AA02B48CC7236DA',
secret='kBV5TmoWia6b4bk/kQGyy9sKghNVXz2f+3aBYiLx')
rsconnect::deployApp('conjoint app')
# test function -----------------------------------------------------------
source('C:/Users/hannesrosenbusch/Documents/introducing conjoint/conjoint app/hanneshelpers.R')
df = data.table::fread('C:/Users/hannesrosenbusch/Documents/introducing conjoint/ice cream conjoint/adminexport400.csv', data.table = F)
df = data.table::fread('C:/Users/hannesrosenbusch/Documents/introducing conjoint/attractiveness conjoint/adminexport.csv', data.table = F)
#df = df[,grepl('Welche dieser', colnames(df))] #select relevant columns
df = df[,grepl('attraktivste', colnames(df))] #select relevant columns
key = data.table::fread('C:/Users/hannesrosenbusch/Documents/introducing conjoint/ice cream conjoint/choice sets-2021-06-18.csv', data.table = F)
key = data.table::fread('C:/Users/hannesrosenbusch/Documents/introducing conjoint/attractiveness conjoint/ANALYSES CODES DO NOT DELETE.csv', data.table = F)
nr_profiles = 3
none_option = FALSE
# r = importance_utility_ranking(df = df,key = key, nr_profiles = nr_profiles, none_option = none_option)
# r[[1]]
# r[[2]]
# r[[3]]
library(ChoiceModelR)
library(tidyr)
library(ggplot2)
key$Set = NULL
df$ID = 1:nrow(df)
nr_participants = nrow(df)
#long format with row per participant and set
df = df %>% pivot_longer(-ID, names_to = "set", values_to = "answer")
#correct set variable
df$set = substr(df$answer,1,nchar(df$answer)-1)
#format response variable
df$y = substr(df$answer,nchar(df$answer), nchar(df$answer))
df$y = tolower(df$y)
df$y = match(df$y, letters)
df$answer = NULL
df$set = rep(1:nrow(key), nrow(df)/nrow(key))
#df$y[is.na(df$y)] = sapply(df$y[is.na(df$y)] , function(x){sample(1:nr_profiles, 1)})
#format column and attribute names
colnames(key) = gsub("_a","",colnames(key));
colnames(key) = gsub("_b","",colnames(key));
if(nr_profiles > 2){colnames(key) = gsub("_c","",colnames(key))}
if(nr_profiles > 3){colnames(key) = gsub("_d","",colnames(key))}
colnames(key) =trimws(colnames(key))
attribute_names =trimws(unique(colnames(key)[colnames(key) != 'Set']))
nr_attributes = length(attribute_names)
#extract and count levels for attributes
sets = 1:nrow(key)
temp = key[,1:nr_attributes]
nr_levels = sapply(X = temp, FUN = function(x){length(unique(x))})
profile = sort(rep(1:nr_profiles, nrow(key)))
#print("eeeh")
#put profiles of same set underneath each other (long format)
A_key = key[,1:nr_attributes]
B_key = key[,(nr_attributes +1): (2* nr_attributes)]
if(nr_profiles == 2){
long_key = cbind(sets, profile, rbind(A_key, B_key))
}else if(nr_profiles == 3){C_key = key[,(2* nr_attributes + 1): (3* nr_attributes)]
long_key = cbind(sets, profile, rbind(A_key, B_key, C_key))
}else if(nr_profiles == 4){D_key = key[,(3* nr_attributes + 1): (4* nr_attributes)]
long_key = cbind(sets, profile, rbind(A_key, B_key, C_key, D_key))
}else{stop("Too few/many profiles per set")}
#go from all profiles to all profiles per participant in right format for choicemodelR
long_key = long_key[order(long_key$sets),]
long_df = long_key[rep(1:nrow(long_key), nr_participants),]
ID = sort(rep(df$ID, (nr_profiles)), decreasing = F)
long_df = cbind(ID, long_df)
#print("uuuuh")
#populate response variable in right way for choicemodelR
long_df$y = NA
long_df$ID_set = paste(long_df$ID, long_df$set, sep = "_")
past_ID_set = 0
#print(df$y)
View(df)
View(key)
View(long_df)
#print(df$y)
rated = T
for(i in 1:nrow(long_df)){
current_ID_set = long_df$ID_set[i]
if((current_ID_set  == past_ID_set) & rated){long_df$y[i] = 0
}else{
past_ID_set =  current_ID_set
profile_choice = df$y[df$ID == long_df$ID[i] & df$set == long_df$sets[i]]
if(length(df$y[df$ID == long_df$ID[i] & df$set == long_df$sets[i]]) != 0){
rated = T
long_df$y[i] = profile_choice}
else{print('nooo'); rated = F}}
}
View(long_df)
long_df$ID_set = NULL
print(nrow(long_df))
View(long_df)
# test function -----------------------------------------------------------
source('C:/Users/hannesrosenbusch/Documents/introducing conjoint/conjoint app/hanneshelpers.R')
df = data.table::fread('C:/Users/hannesrosenbusch/Documents/introducing conjoint/ice cream conjoint/adminexport400.csv', data.table = F)
df = data.table::fread('C:/Users/hannesrosenbusch/Documents/introducing conjoint/attractiveness conjoint/adminexport.csv', data.table = F)
#df = df[,grepl('Welche dieser', colnames(df))] #select relevant columns
df = df[,grepl('attraktivste', colnames(df))] #select relevant columns
key = data.table::fread('C:/Users/hannesrosenbusch/Documents/introducing conjoint/ice cream conjoint/choice sets-2021-06-18.csv', data.table = F)
key = data.table::fread('C:/Users/hannesrosenbusch/Documents/introducing conjoint/attractiveness conjoint/ANALYSES CODES DO NOT DELETE.csv', data.table = F)
nr_profiles = 3
none_option = FALSE
# r = importance_utility_ranking(df = df,key = key, nr_profiles = nr_profiles, none_option = none_option)
# r[[1]]
# r[[2]]
# r[[3]]
library(ChoiceModelR)
library(tidyr)
library(ggplot2)
key$Set = NULL
df$ID = 1:nrow(df)
nr_participants = nrow(df)
#long format with row per participant and set
df = df %>% pivot_longer(-ID, names_to = "set", values_to = "answer")
#correct set variable
df$set = substr(df$answer,1,nchar(df$answer)-1)
#format response variable
df$y = substr(df$answer,nchar(df$answer), nchar(df$answer))
df$y = tolower(df$y)
df$y = match(df$y, letters)
df$answer = NULL
df$set = rep(1:nrow(key), nrow(df)/nrow(key))
#df$y[is.na(df$y)] = sapply(df$y[is.na(df$y)] , function(x){sample(1:nr_profiles, 1)})
#format column and attribute names
colnames(key) = gsub("_a","",colnames(key));
colnames(key) = gsub("_b","",colnames(key));
if(nr_profiles > 2){colnames(key) = gsub("_c","",colnames(key))}
if(nr_profiles > 3){colnames(key) = gsub("_d","",colnames(key))}
colnames(key) =trimws(colnames(key))
attribute_names =trimws(unique(colnames(key)[colnames(key) != 'Set']))
nr_attributes = length(attribute_names)
#extract and count levels for attributes
sets = 1:nrow(key)
temp = key[,1:nr_attributes]
nr_levels = sapply(X = temp, FUN = function(x){length(unique(x))})
profile = sort(rep(1:nr_profiles, nrow(key)))
#print("eeeh")
#put profiles of same set underneath each other (long format)
A_key = key[,1:nr_attributes]
B_key = key[,(nr_attributes +1): (2* nr_attributes)]
if(nr_profiles == 2){
long_key = cbind(sets, profile, rbind(A_key, B_key))
}else if(nr_profiles == 3){C_key = key[,(2* nr_attributes + 1): (3* nr_attributes)]
long_key = cbind(sets, profile, rbind(A_key, B_key, C_key))
}else if(nr_profiles == 4){D_key = key[,(3* nr_attributes + 1): (4* nr_attributes)]
long_key = cbind(sets, profile, rbind(A_key, B_key, C_key, D_key))
}else{stop("Too few/many profiles per set")}
#go from all profiles to all profiles per participant in right format for choicemodelR
long_key = long_key[order(long_key$sets),]
long_df = long_key[rep(1:nrow(long_key), nr_participants),]
ID = sort(rep(df$ID, (nr_profiles)), decreasing = F)
long_df = cbind(ID, long_df)
#print("uuuuh")
#populate response variable in right way for choicemodelR
long_df$y = NA
long_df$ID_set = paste(long_df$ID, long_df$set, sep = "_")
past_ID_set = 0
#print(df$y)
rated = T
for(i in 1:nrow(long_df)){
current_ID_set = long_df$ID_set[i]
if((current_ID_set  == past_ID_set) & rated){long_df$y[i] = 0
}else{
past_ID_set =  current_ID_set
profile_choice = df$y[df$ID == long_df$ID[i] & df$set == long_df$sets[i]]
if(!is.na(profile_choice)){
rated = T
long_df$y[i] = profile_choice}
else{rated = F}}
}
long_df$ID_set = NULL
print(nrow(long_df))
long_df = long_df[!is.na(long_df$y),]
print(nrow(long_df))
#numerical coding of attribute levels
colnames(long_df) = trimws(colnames(long_df))
long_df[,colnames(long_df) %in% attribute_names] = sapply(long_df[,colnames(long_df) %in% attribute_names], function(x){as.numeric(factor(x))})
print(long_df)
#fit model with normal prior centered on zero with variance = 2
long_df = as.matrix(long_df)
xcoding = rep(0, nr_attributes)
mcmc = list(R = 4000, use = 3500)
options = list(none=none_option, save=TRUE, keep=1)
print("oh")
out = choicemodelr(long_df, xcoding, mcmc = mcmc, options = options)
sum(is.na(long_df))
View(long_df)
source('C:/Users/hannesrosenbusch/Documents/introducing conjoint/conjoint app/cust_choicemodelr.R')
source('C:/Users/hannesrosenbusch/Documents/introducing conjoint/cust_choicemodelr.R')
source('C:/Users/hannesrosenbusch/Documents/introducing conjoint/cust_choicemodelr.R')
