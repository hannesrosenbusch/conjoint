#sims
sim_admin = data.frame(matrix(0, ncol = nrow(sets), nrow = 1000))
set.seed(1)
trueutilities = matrix(rnorm(ncol(dm) * nrow(dm)), ncol = ncol(dm))
trueutilities = scale(trueutilities, scale = F)
trueutilities = c(trueutilities)
names(trueutilities) = as.vector(unlist(dm))
#simulate decisions based on utilities
for(i in 1:ncol(sim_admin)) {
set = sets[i,]
profile1 = set[,1:(ncol(sets)/3)]
profile2 = set[,(ncol(sets)/3 + 1):(ncol(sets)/3 * 2)]
profile3 = set[,(ncol(sets)/3 * 2 + 1):ncol(sets)]
utility1 = sum(trueutilities[unlist(profile1)])
utility2 = sum(trueutilities[unlist(profile2)])
utility3 = sum(trueutilities[unlist(profile3)])
wghts = softmax(c(utility1, utility2, utility3))
decisions = sample(c("A","B","C"), size = nrow(sim_admin), prob = wghts, replace = T)
sim_admin[,i] = paste0(i, decisions)
}
r = importance_utility_ranking(df = sim_admin,key = sets, nr_profiles = 3, none_option = FALSE)
exp = ggplot() + geom_bar(aes(x = names(trueutilities), y = trueutilities), stat = "identity")
r[[2]]
trueutilities
#this script tests the app code outside shiny
source('hanneshelpers.R')
load("all_designchecks.RData")
library(jpeg)
library(png)
library(grid)
library(shiny)
library(shinythemes)
library(shinyWidgets)
library(DT)
library(ggplot2)
library(gridExtra)
library(conjoint)
library(DoE.base)
library(flextable)
library(officer)
softmax <- function(par){
n.par <- length(par)
par1 <- sort(par, decreasing = TRUE)
Lk <- par1[1]
for (k in 1:(n.par-1)) {
Lk <- max(par1[k+1], Lk) + log1p(exp(-abs(par1[k+1] - Lk)))
}
val <- exp(par - Lk)
return(val)
}
txt1 = "Relleno, Precio, Sabor, somebn"
txt2 = " Fresa, Vainilla, Kiwi, Choc; 1.50, 2.50, 2, 3; 100g, 200g, 300g;sa, so, se"
#v
attribute_names = strsplit(txt1, ",")
nr_attributes = length(attribute_names[[1]])
attribute_levels_strings = strsplit(txt2, ";")
levels_vectors = list(); max_levels = 1
for(i in 1:length(attribute_levels_strings[[1]])){
level_list = strsplit(attribute_levels_strings[[1]][i], ",")
l = length(unlist(level_list))
max_levels = max(max_levels, l)
levels_vectors = c(levels_vectors, level_list)}
dm <- data.frame(matrix(ncol = nr_attributes, nrow = max_levels))
colnames(dm) <- attribute_names[[1]]
for(i in 1:length(levels_vectors)){
for(j in 1:length(levels_vectors[[i]])){
dm[j,i] = levels_vectors[[i]][j]
} }
dm[is.na(dm)] = ""
colnames(dm) = trimws(colnames(dm))
dm
#betterdesigns
des = current_and_alternative_designs(dm)
out = des[[2]]
if(des[[3]] == "Good design!"){out = des[[1]]#out[des[[1]][1, "Design"],]
}else if(des[[3]] == "Larger, optimized designs available!"){out = rbind(des[[1]],des[[2]]); out = out[!duplicated(out$Design),]
}else {return(NULL)}
out
#orth
dm = dm[,order(colSums(dm==""), decreasing = T)]
dm_list = as.list(dm)
dm_list = removeListElemComplete(dm_list, "")
ddd = oa.design(factor.names = dm_list, columns = "min3", seed = 42)
colnames(ddd) = gsub("X.", "", colnames(ddd) )
ddd = as.data.frame(ddd)
cur_des = paste( (nrow(dm) - colSums(dm=="")), collapse = "x")
temp = all_designchecks[names(all_designchecks) == cur_des]
achievable_nr_sets = temp[which.min(unlist(temp))]
if(nrow(ddd) > achievable_nr_sets){
dm[dm==''] = NA
experiment<-expand.grid(dm)
experiment=experiment[complete.cases(experiment),]
ddd = caFactorialDesign(data=experiment,type="orthogonal", seed = 42)
}
ddd
#sets
piles = mix_match(ddd)
pile1 = piles[[1]][colnames(dm)];pile2 = piles[[2]][colnames(dm)];pile3 = piles[[3]][colnames(dm)]
colnames(pile1) = paste(colnames(pile1), "a", sep = "_"); colnames(pile2) = paste(colnames(pile2), "b", sep ="_");colnames(pile3) = paste(colnames(pile3), "c", sep ="_")
sets = cbind(pile1,pile2,pile3)
sets["Set"] = 1:nrow(sets)
sets
#sims
sim_admin = data.frame(matrix(0, ncol = nrow(sets), nrow = 1000))
set.seed(1)
trueutilities = matrix(rnorm(ncol(dm) * nrow(dm)), ncol = ncol(dm))
trueutilities = scale(trueutilities, scale = F)
trueutilities = c(trueutilities)
names(trueutilities) = as.vector(unlist(dm))
#simulate decisions based on utilities
for(i in 1:ncol(sim_admin)) {
set = sets[i,]
profile1 = set[,1:(ncol(sets)/3)]
profile2 = set[,(ncol(sets)/3 + 1):(ncol(sets)/3 * 2)]
profile3 = set[,(ncol(sets)/3 * 2 + 1):ncol(sets)]
utility1 = sum(trueutilities[unlist(profile1)])
utility2 = sum(trueutilities[unlist(profile2)])
utility3 = sum(trueutilities[unlist(profile3)])
wghts = softmax(c(utility1, utility2, utility3))
decisions = sample(c("A","B","C"), size = nrow(sim_admin), prob = wghts, replace = T)
sim_admin[,i] = paste0(i, decisions)
}
r = importance_utility_ranking(df = sim_admin,key = sets, nr_profiles = 3, none_option = FALSE)
exp = ggplot() + geom_bar(aes(x = names(trueutilities), y = trueutilities), stat = "identity")
r[[2]]
trueutilities
#this script tests the app code outside shiny
source('hanneshelpers.R')
load("all_designchecks.RData")
library(jpeg)
library(png)
library(grid)
library(shiny)
library(shinythemes)
library(shinyWidgets)
library(DT)
library(ggplot2)
library(gridExtra)
library(conjoint)
library(DoE.base)
library(flextable)
library(officer)
softmax <- function(par){
n.par <- length(par)
par1 <- sort(par, decreasing = TRUE)
Lk <- par1[1]
for (k in 1:(n.par-1)) {
Lk <- max(par1[k+1], Lk) + log1p(exp(-abs(par1[k+1] - Lk)))
}
val <- exp(par - Lk)
return(val)
}
txt1 = "Relleno, Precio, Sabor, somebn"
txt2 = " Fresa, Vainilla, Kiwi, Choc; 1.50, 2.50, 2, 3; 100g, 200g, 300g;sa, so, se"
#v
attribute_names = strsplit(txt1, ",")
nr_attributes = length(attribute_names[[1]])
attribute_levels_strings = strsplit(txt2, ";")
levels_vectors = list(); max_levels = 1
for(i in 1:length(attribute_levels_strings[[1]])){
level_list = strsplit(attribute_levels_strings[[1]][i], ",")
l = length(unlist(level_list))
max_levels = max(max_levels, l)
levels_vectors = c(levels_vectors, level_list)}
dm <- data.frame(matrix(ncol = nr_attributes, nrow = max_levels))
colnames(dm) <- attribute_names[[1]]
for(i in 1:length(levels_vectors)){
for(j in 1:length(levels_vectors[[i]])){
dm[j,i] = levels_vectors[[i]][j]
} }
dm[is.na(dm)] = ""
colnames(dm) = trimws(colnames(dm))
dm
#betterdesigns
des = current_and_alternative_designs(dm)
out = des[[2]]
if(des[[3]] == "Good design!"){out = des[[1]]#out[des[[1]][1, "Design"],]
}else if(des[[3]] == "Larger, optimized designs available!"){out = rbind(des[[1]],des[[2]]); out = out[!duplicated(out$Design),]
}else {return(NULL)}
out
#orth
dm = dm[,order(colSums(dm==""), decreasing = T)]
dm_list = as.list(dm)
dm_list = removeListElemComplete(dm_list, "")
ddd = oa.design(factor.names = dm_list, columns = "min3", seed = 42)
colnames(ddd) = gsub("X.", "", colnames(ddd) )
ddd = as.data.frame(ddd)
cur_des = paste( (nrow(dm) - colSums(dm=="")), collapse = "x")
temp = all_designchecks[names(all_designchecks) == cur_des]
achievable_nr_sets = temp[which.min(unlist(temp))]
if(nrow(ddd) > achievable_nr_sets){
dm[dm==''] = NA
experiment<-expand.grid(dm)
experiment=experiment[complete.cases(experiment),]
ddd = caFactorialDesign(data=experiment,type="orthogonal", seed = 42)
}
ddd
#sets
piles = mix_match(ddd)
pile1 = piles[[1]][colnames(dm)];pile2 = piles[[2]][colnames(dm)];pile3 = piles[[3]][colnames(dm)]
colnames(pile1) = paste(colnames(pile1), "a", sep = "_"); colnames(pile2) = paste(colnames(pile2), "b", sep ="_");colnames(pile3) = paste(colnames(pile3), "c", sep ="_")
sets = cbind(pile1,pile2,pile3)
sets["Set"] = 1:nrow(sets)
sets
#sims
sim_admin = data.frame(matrix(0, ncol = nrow(sets), nrow = 1000))
set.seed(1)
trueutilities = matrix(rnorm(ncol(dm) * nrow(dm)), ncol = ncol(dm))
trueutilities = scale(trueutilities, scale = F)
trueutilities = c(trueutilities)
names(trueutilities) = as.vector(unlist(dm))
#simulate decisions based on utilities
for(i in 1:ncol(sim_admin)) {
set = sets[i,]
profile1 = set[,1:(ncol(sets)/3)]
profile2 = set[,(ncol(sets)/3 + 1):(ncol(sets)/3 * 2)]
profile3 = set[,(ncol(sets)/3 * 2 + 1):ncol(sets)]
utility1 = sum(trueutilities[unlist(profile1)])
utility2 = sum(trueutilities[unlist(profile2)])
utility3 = sum(trueutilities[unlist(profile3)])
wghts = softmax(c(utility1, utility2, utility3))
decisions = sample(c("A","B","C"), size = nrow(sim_admin), prob = wghts, replace = T)
sim_admin[,i] = paste0(i, decisions)
}
r = importance_utility_ranking(df = sim_admin,key = sets, nr_profiles = 3, none_option = FALSE)
exp = ggplot() + geom_bar(aes(x = names(trueutilities), y = trueutilities), stat = "identity")
r[[2]]
trueutilities
sets
profile1
profile2
profile3
trueutilities
dm
#this script tests the app code outside shiny
source('hanneshelpers.R')
load("all_designchecks.RData")
library(jpeg)
library(png)
library(grid)
library(shiny)
library(shinythemes)
library(shinyWidgets)
library(DT)
library(ggplot2)
library(gridExtra)
library(conjoint)
library(DoE.base)
library(flextable)
library(officer)
softmax <- function(par){
n.par <- length(par)
par1 <- sort(par, decreasing = TRUE)
Lk <- par1[1]
for (k in 1:(n.par-1)) {
Lk <- max(par1[k+1], Lk) + log1p(exp(-abs(par1[k+1] - Lk)))
}
val <- exp(par - Lk)
return(val)
}
txt1 = "Relleno, Precio, Sabor, somebn"
txt2 = " Fresa, Vainilla, Kiwi, Choc; 1.50, 2.50, 2, 3; 100g, 200g, 300g, 400g;sa, so, se, si"
#v
attribute_names = strsplit(txt1, ",")
nr_attributes = length(attribute_names[[1]])
attribute_levels_strings = strsplit(txt2, ";")
levels_vectors = list(); max_levels = 1
for(i in 1:length(attribute_levels_strings[[1]])){
level_list = strsplit(attribute_levels_strings[[1]][i], ",")
l = length(unlist(level_list))
max_levels = max(max_levels, l)
levels_vectors = c(levels_vectors, level_list)}
dm <- data.frame(matrix(ncol = nr_attributes, nrow = max_levels))
colnames(dm) <- attribute_names[[1]]
for(i in 1:length(levels_vectors)){
for(j in 1:length(levels_vectors[[i]])){
dm[j,i] = levels_vectors[[i]][j]
} }
dm[is.na(dm)] = ""
colnames(dm) = trimws(colnames(dm))
dm
#betterdesigns
des = current_and_alternative_designs(dm)
out = des[[2]]
if(des[[3]] == "Good design!"){out = des[[1]]#out[des[[1]][1, "Design"],]
}else if(des[[3]] == "Larger, optimized designs available!"){out = rbind(des[[1]],des[[2]]); out = out[!duplicated(out$Design),]
}else {return(NULL)}
out
#orth
dm = dm[,order(colSums(dm==""), decreasing = T)]
dm_list = as.list(dm)
dm_list = removeListElemComplete(dm_list, "")
ddd = oa.design(factor.names = dm_list, columns = "min3", seed = 42)
colnames(ddd) = gsub("X.", "", colnames(ddd) )
ddd = as.data.frame(ddd)
cur_des = paste( (nrow(dm) - colSums(dm=="")), collapse = "x")
temp = all_designchecks[names(all_designchecks) == cur_des]
achievable_nr_sets = temp[which.min(unlist(temp))]
if(nrow(ddd) > achievable_nr_sets){
dm[dm==''] = NA
experiment<-expand.grid(dm)
experiment=experiment[complete.cases(experiment),]
ddd = caFactorialDesign(data=experiment,type="orthogonal", seed = 42)
}
ddd
#sets
piles = mix_match(ddd)
pile1 = piles[[1]][colnames(dm)];pile2 = piles[[2]][colnames(dm)];pile3 = piles[[3]][colnames(dm)]
colnames(pile1) = paste(colnames(pile1), "a", sep = "_"); colnames(pile2) = paste(colnames(pile2), "b", sep ="_");colnames(pile3) = paste(colnames(pile3), "c", sep ="_")
sets = cbind(pile1,pile2,pile3)
sets["Set"] = 1:nrow(sets)
sets
#sims
sim_admin = data.frame(matrix(0, ncol = nrow(sets), nrow = 1000))
set.seed(1)
trueutilities = matrix(rnorm(ncol(dm) * nrow(dm)), ncol = ncol(dm))
trueutilities = scale(trueutilities, scale = F)
trueutilities = c(trueutilities)
names(trueutilities) = as.vector(unlist(dm))
#simulate decisions based on utilities
for(i in 1:ncol(sim_admin)) {
set = sets[i,]
profile1 = set[,1:(ncol(sets)/3)]
profile2 = set[,(ncol(sets)/3 + 1):(ncol(sets)/3 * 2)]
profile3 = set[,(ncol(sets)/3 * 2 + 1):ncol(sets)]
utility1 = sum(trueutilities[unlist(profile1)])
utility2 = sum(trueutilities[unlist(profile2)])
utility3 = sum(trueutilities[unlist(profile3)])
wghts = softmax(c(utility1, utility2, utility3))
decisions = sample(c("A","B","C"), size = nrow(sim_admin), prob = wghts, replace = T)
sim_admin[,i] = paste0(i, decisions)
}
r = importance_utility_ranking(df = sim_admin,key = sets, nr_profiles = 3, none_option = FALSE)
exp = ggplot() + geom_bar(aes(x = names(trueutilities), y = trueutilities), stat = "identity")
r[[2]]
trueutilities
#this script tests the app code outside shiny
source('hanneshelpers.R')
load("all_designchecks.RData")
library(jpeg)
library(png)
library(grid)
library(shiny)
library(shinythemes)
library(shinyWidgets)
library(DT)
library(ggplot2)
library(gridExtra)
library(conjoint)
library(DoE.base)
library(flextable)
library(officer)
softmax <- function(par){
n.par <- length(par)
par1 <- sort(par, decreasing = TRUE)
Lk <- par1[1]
for (k in 1:(n.par-1)) {
Lk <- max(par1[k+1], Lk) + log1p(exp(-abs(par1[k+1] - Lk)))
}
val <- exp(par - Lk)
return(val)
}
txt1 = "Relleno, Precio, Sabor, somebn, bapbap"
txt2 = " Fresa, Vainilla, Kiwi, Choc, loo; 1.50, 2.50, 2, 3, 4; 100g, 200g, 300g, 400g, 500g;sa, so, se, si, su"
#v
attribute_names = strsplit(txt1, ",")
nr_attributes = length(attribute_names[[1]])
attribute_levels_strings = strsplit(txt2, ";")
levels_vectors = list(); max_levels = 1
for(i in 1:length(attribute_levels_strings[[1]])){
level_list = strsplit(attribute_levels_strings[[1]][i], ",")
l = length(unlist(level_list))
max_levels = max(max_levels, l)
levels_vectors = c(levels_vectors, level_list)}
dm <- data.frame(matrix(ncol = nr_attributes, nrow = max_levels))
colnames(dm) <- attribute_names[[1]]
for(i in 1:length(levels_vectors)){
for(j in 1:length(levels_vectors[[i]])){
dm[j,i] = levels_vectors[[i]][j]
} }
dm[is.na(dm)] = ""
colnames(dm) = trimws(colnames(dm))
dm
#betterdesigns
des = current_and_alternative_designs(dm)
out = des[[2]]
if(des[[3]] == "Good design!"){out = des[[1]]#out[des[[1]][1, "Design"],]
}else if(des[[3]] == "Larger, optimized designs available!"){out = rbind(des[[1]],des[[2]]); out = out[!duplicated(out$Design),]
}else {return(NULL)}
out
#this script tests the app code outside shiny
source('hanneshelpers.R')
load("all_designchecks.RData")
library(jpeg)
library(png)
library(grid)
library(shiny)
library(shinythemes)
library(shinyWidgets)
library(DT)
library(ggplot2)
library(gridExtra)
library(conjoint)
library(DoE.base)
library(flextable)
library(officer)
softmax <- function(par){
n.par <- length(par)
par1 <- sort(par, decreasing = TRUE)
Lk <- par1[1]
for (k in 1:(n.par-1)) {
Lk <- max(par1[k+1], Lk) + log1p(exp(-abs(par1[k+1] - Lk)))
}
val <- exp(par - Lk)
return(val)
}
txt1 = "Relleno, Precio, Sabor, somebn, bapbap"
txt2 = " Fresa, Vainilla, Kiwi, Choc, loo; 1.50, 2.50, 2, 3, 4; 100g, 200g, 300g, 400g, 500g;sa, so, se, si, su; a,s,d,f,g"
#v
attribute_names = strsplit(txt1, ",")
nr_attributes = length(attribute_names[[1]])
attribute_levels_strings = strsplit(txt2, ";")
levels_vectors = list(); max_levels = 1
for(i in 1:length(attribute_levels_strings[[1]])){
level_list = strsplit(attribute_levels_strings[[1]][i], ",")
l = length(unlist(level_list))
max_levels = max(max_levels, l)
levels_vectors = c(levels_vectors, level_list)}
dm <- data.frame(matrix(ncol = nr_attributes, nrow = max_levels))
colnames(dm) <- attribute_names[[1]]
for(i in 1:length(levels_vectors)){
for(j in 1:length(levels_vectors[[i]])){
dm[j,i] = levels_vectors[[i]][j]
} }
dm[is.na(dm)] = ""
colnames(dm) = trimws(colnames(dm))
dm
#betterdesigns
des = current_and_alternative_designs(dm)
out = des[[2]]
if(des[[3]] == "Good design!"){out = des[[1]]#out[des[[1]][1, "Design"],]
}else if(des[[3]] == "Larger, optimized designs available!"){out = rbind(des[[1]],des[[2]]); out = out[!duplicated(out$Design),]
}else {return(NULL)}
out
#orth
dm = dm[,order(colSums(dm==""), decreasing = T)]
dm_list = as.list(dm)
dm_list = removeListElemComplete(dm_list, "")
ddd = oa.design(factor.names = dm_list, columns = "min3", seed = 42)
colnames(ddd) = gsub("X.", "", colnames(ddd) )
ddd = as.data.frame(ddd)
cur_des = paste( (nrow(dm) - colSums(dm=="")), collapse = "x")
temp = all_designchecks[names(all_designchecks) == cur_des]
achievable_nr_sets = temp[which.min(unlist(temp))]
if(nrow(ddd) > achievable_nr_sets){
dm[dm==''] = NA
experiment<-expand.grid(dm)
experiment=experiment[complete.cases(experiment),]
ddd = caFactorialDesign(data=experiment,type="orthogonal", seed = 42)
}
ddd
#sets
piles = mix_match(ddd)
pile1 = piles[[1]][colnames(dm)];pile2 = piles[[2]][colnames(dm)];pile3 = piles[[3]][colnames(dm)]
colnames(pile1) = paste(colnames(pile1), "a", sep = "_"); colnames(pile2) = paste(colnames(pile2), "b", sep ="_");colnames(pile3) = paste(colnames(pile3), "c", sep ="_")
sets = cbind(pile1,pile2,pile3)
sets["Set"] = 1:nrow(sets)
sets
#sims
sim_admin = data.frame(matrix(0, ncol = nrow(sets), nrow = 1000))
set.seed(1)
trueutilities = matrix(rnorm(ncol(dm) * nrow(dm)), ncol = ncol(dm))
trueutilities = scale(trueutilities, scale = F)
trueutilities = c(trueutilities)
names(trueutilities) = as.vector(unlist(dm))
#simulate decisions based on utilities
for(i in 1:ncol(sim_admin)) {
set = sets[i,]
profile1 = set[,1:(ncol(sets)/3)]
profile2 = set[,(ncol(sets)/3 + 1):(ncol(sets)/3 * 2)]
profile3 = set[,(ncol(sets)/3 * 2 + 1):ncol(sets)]
utility1 = sum(trueutilities[unlist(profile1)])
utility2 = sum(trueutilities[unlist(profile2)])
utility3 = sum(trueutilities[unlist(profile3)])
wghts = softmax(c(utility1, utility2, utility3))
decisions = sample(c("A","B","C"), size = nrow(sim_admin), prob = wghts, replace = T)
sim_admin[,i] = paste0(i, decisions)
}
r = importance_utility_ranking(df = sim_admin,key = sets, nr_profiles = 3, none_option = FALSE)
exp = ggplot() + geom_bar(aes(x = names(trueutilities), y = trueutilities), stat = "identity")
r[[2]]
trueutilities
shiny::runApp()
runApp()
install.packages('htmltools')
install.packages("htmltools")
shiny::runApp()
version("Rccp")
library(Rcpp)
install.packages("Rcpp")
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(rsconnect)
setwd("C:/Users/hannesrosenbusch/Documents/conjoint")
rsconnect::setAccountInfo(name='rosenbusch',
token='AE3BBCC32B976AD16AA02B48CC7236DA',
secret='kBV5TmoWia6b4bk/kQGyy9sKghNVXz2f+3aBYiLx')
rsconnect::deployApp('conjoint app')
