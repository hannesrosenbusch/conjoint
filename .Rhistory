}
current_and_alternative_designs = function(data){
current_design = paste(sort(apply(test, 2, function(x)length(x) - sum(is.na(x)))), collapse = "x")
if(current_design %in% names(designchecks)){
if(designchecks[current_design] <= 48){
print(designchecks[current_design])
return(list(current_design,NA))
}else{
coded_dcheck = strsplit(names(designchecks), "x")
integer_dcheck = lapply(coded_dcheck,  as.integer)
better_designs = as.data.frame(unlist(designchecks[which(unlist(lapply(integer_dcheck, bigger_design, current_design = current_design)) & designchecks <= 48)]))
colnames(better_designs) = c("#Sets")
return(list(current_design,better_designs))}
}else{stop("Odd design mate!")}
}
load("designchecks.Rdata")
test = data.frame(matrix(data = "val", nrow = 5, ncol = 4))
test[5,3] = NA
test[3:5,1] = NA
current_and_alternative_designs(test)
current_and_alternative_designs = function(data){
current_design = paste(sort(apply(test, 2, function(x)length(x) - sum(is.na(x)))), collapse = "x")
if(current_design %in% names(designchecks)){
if(designchecks[current_design] <= 48){
print(designchecks[current_design])
return(list(designchecks[current_design],NA))
}else{
coded_dcheck = strsplit(names(designchecks), "x")
integer_dcheck = lapply(coded_dcheck,  as.integer)
better_designs = as.data.frame(unlist(designchecks[which(unlist(lapply(integer_dcheck, bigger_design, current_design = current_design)) & designchecks <= 48)]))
colnames(better_designs) = c("#Sets")
return(list(designchecks[current_design],better_designs))}
}else{stop("Odd design mate!")}
}
load("designchecks.Rdata")
test = data.frame(matrix(data = "val", nrow = 5, ncol = 4))
test[5,3] = NA
test[3:5,1] = NA
current_and_alternative_designs(test)
current_and_alternative_designs = function(data){
current_design = paste(sort(apply(test, 2, function(x)length(x) - sum(is.na(x)))), collapse = "x")
if(current_design %in% names(designchecks)){
if(designchecks[current_design] <= 48){
return(list(designchecks[current_design],NA))
}else{
coded_dcheck = strsplit(names(designchecks), "x")
integer_dcheck = lapply(coded_dcheck,  as.integer)
better_designs = as.data.frame(unlist(designchecks[which(unlist(lapply(integer_dcheck, bigger_design, current_design = current_design)) & designchecks <= 48)]))
colnames(better_designs) = c("#Sets")
return(list(designchecks[current_design],better_designs))}
}else{stop("Odd design mate!")}
}
load("designchecks.Rdata")
test = data.frame(matrix(data = "val", nrow = 5, ncol = 4))
test[5,3] = NA
test[3:5,1] = NA
current_and_alternative_designs(test)
load("designchecks.Rdata")
test = data.frame(matrix(data = "val", nrow = 5, ncol = 4))
test[5,3] = NA
test[4:5,1] = NA
current_and_alternative_designs(test)
current_and_alternative_designs = function(data){
current_design = paste(sort(apply(test, 2, function(x)length(x) - sum(is.na(x)))), collapse = "x")
if(current_design %in% names(designchecks)){
if(designchecks[current_design] <= 32){
return(list(designchecks[current_design],NULL, "Good design!"))
}else{
coded_dcheck = strsplit(names(designchecks), "x")
integer_dcheck = lapply(coded_dcheck,  as.integer)
better_designs = as.data.frame(unlist(designchecks[which(unlist(lapply(integer_dcheck, bigger_design, current_design = current_design)) & designchecks <= 48)]))
colnames(better_designs) = c("#Sets")
print(better_designs)
return(list(designchecks[current_design],better_designs, "Consider a larger/bias-free design..."))}
}else{return(NULL, NULL, "Questionable design size")}
}
load("designchecks.Rdata")
test = data.frame(matrix(data = "val", nrow = 5, ncol = 4))
test[5,3] = NA
test[4:5,1] = NA
current_and_alternative_designs(test)
designchecks[current_design]
test
current_and_alternative_designs = function(data){
current_design = paste(sort(apply(test, 2, function(x)length(x) - sum(is.na(x)))), collapse = "x")
if(current_design %in% names(designchecks)){
if(designchecks[current_design] <= 32){
return(list(designchecks[current_design],NULL, "Good design!"))
}else{
coded_dcheck = strsplit(names(designchecks), "x")
integer_dcheck = lapply(coded_dcheck,  as.integer)
better_designs = as.data.frame(unlist(designchecks[which(unlist(lapply(integer_dcheck, bigger_design, current_design = current_design)) & designchecks <= 48)]))
colnames(better_designs) = c("#Sets")
print(nrow(better_designs))
return(list(designchecks[current_design],better_designs, "Consider a larger/bias-free design..."))}
}else{return(NULL, NULL, "Questionable design size")}
}
load("designchecks.Rdata")
test = data.frame(matrix(data = "val", nrow = 5, ncol = 4))
test[5,3] = NA
test[4:5,1] = NA
current_and_alternative_designs(test)
test[3:5,1] = NA
current_and_alternative_designs(test)
test[4:5,3] = NA
test[3:5,1] = NA
current_and_alternative_designs(test)
test[4:5,1] = NA
current_and_alternative_designs(test)
current_and_alternative_designs = function(data){
current_design = paste(sort(apply(test, 2, function(x)length(x) - sum(is.na(x)))), collapse = "x")
if(current_design %in% names(designchecks)){
coded_dcheck = strsplit(names(designchecks), "x")
integer_dcheck = lapply(coded_dcheck,  as.integer)
better_designs = as.data.frame(unlist(designchecks[which(unlist(lapply(integer_dcheck, bigger_design, current_design = current_design)) & designchecks <= 48)]))
colnames(better_designs) = c("#Sets")
if(designchecks[current_design] <= 32){
message = "Good design!"
}else if(nrow(better_designs) > 0){
message = "Larger, optimized designs available!"
}else{message = "Design size threatens data quality"}
return(list(designchecks[current_design],better_designs, message))}
}else{return(NULL, NULL, "Questionable design size")}
current_and_alternative_designs = function(data){
current_design = paste(sort(apply(test, 2, function(x)length(x) - sum(is.na(x)))), collapse = "x")
if(current_design %in% names(designchecks)){
coded_dcheck = strsplit(names(designchecks), "x")
integer_dcheck = lapply(coded_dcheck,  as.integer)
better_designs = as.data.frame(unlist(designchecks[which(unlist(lapply(integer_dcheck, bigger_design, current_design = current_design)) & designchecks <= 48)]))
colnames(better_designs) = c("#Sets")
if(designchecks[current_design] <= 32){
message = "Good design!"
}else if(nrow(better_designs) > 0){
message = "Larger, optimized designs available!"
}else{message = "Design size threatens data quality"}
return(list(designchecks[current_design],better_designs, message))
}else{return(NULL, NULL, "Questionable design size")}
}
load("designchecks.Rdata")
test = data.frame(matrix(data = "val", nrow = 5, ncol = 4))
test[4:5,3] = NA
test[4:5,1] = NA
current_and_alternative_designs(test)
runApp('introducing conjoint/conjoint app')
runApp('introducing conjoint/conjoint app')
runApp('introducing conjoint/conjoint app')
runApp('introducing conjoint/conjoint app')
runApp('introducing conjoint/conjoint app')
runApp('introducing conjoint/conjoint app')
runApp('introducing conjoint/conjoint app')
runApp('introducing conjoint/conjoint app')
print(data)
runApp('introducing conjoint/conjoint app')
runApp('introducing conjoint/conjoint app')
runApp('introducing conjoint/conjoint app')
runApp('introducing conjoint/conjoint app')
runApp('introducing conjoint/conjoint app')
runApp('introducing conjoint/conjoint app')
runApp('introducing conjoint/conjoint app')
runApp('introducing conjoint/conjoint app')
runApp('introducing conjoint/conjoint app')
runApp('introducing conjoint/conjoint app')
runApp('introducing conjoint/conjoint app')
runApp('introducing conjoint/conjoint app')
runApp('introducing conjoint/conjoint app')
runApp('introducing conjoint/conjoint app')
runApp('introducing conjoint/conjoint app')
runApp('introducing conjoint/conjoint app')
runApp('introducing conjoint/conjoint app')
runApp('introducing conjoint/conjoint app')
runApp('introducing conjoint/conjoint app')
runApp('introducing conjoint/conjoint app')
runApp('introducing conjoint/conjoint app')
runApp('introducing conjoint/conjoint app')
runApp('introducing conjoint/conjoint app')
set.seed(42)
library(conjoint) #version 1.41
library(dplyr)
library(ggplot2)
nr_att_and_lev = 6
attributes_levels = list()
for(l in 1:nr_att_and_lev){
attributes_levels[[l]] = paste0(letters[l], 1:nr_att_and_lev)
}
attributes_levels = as.data.frame(attributes_levels, col.names = LETTERS[1:nr_att_and_lev])
#source("C:/Users/hannesrosenbusch/Documents/introducing conjoint/conjoint app/hanneshelpers.R")
load("C:/Users/hannesrosenbusch/Documents/introducing conjoint/designcheck.RData")
designcheck4 = list()
for(as in 3:nrow(attributes_levels)){
for(bs in 3:nrow(attributes_levels)){
for(cs in 4:nrow(attributes_levels)){
for(ds in 5:nrow(attributes_levels)){
sdes = sort(c(as,bs, cs, ds))
nr_cards = 2*sum(sdes)
current_design = paste(as.character(sdes), collapse = "x")
if(!current_design %in% names(designcheck4)){
#print(nr_cards)
print(current_design)
exper= expand.grid(attributes_levels[1:as,1], attributes_levels[1:bs,2], attributes_levels[1:cs,3], attributes_levels[1:ds,4])
design2=caFactorialDesign(data=exper,type="orthogonal", seed = 42)
designcheck4[current_design]= nrow(design2)
print(nrow(design2))}
}}}}
runApp('introducing conjoint/conjoint app')
set.seed(42)
library(conjoint) #version 1.41
library(dplyr)
library(ggplot2)
nr_att_and_lev = 6
attributes_levels = list()
for(l in 1:nr_att_and_lev){
attributes_levels[[l]] = paste0(letters[l], 1:nr_att_and_lev)
}
attributes_levels = as.data.frame(attributes_levels, col.names = LETTERS[1:nr_att_and_lev])
#source("C:/Users/hannesrosenbusch/Documents/introducing conjoint/conjoint app/hanneshelpers.R")
load("C:/Users/hannesrosenbusch/Documents/introducing conjoint/designcheck.RData")
designcheck4 = list()
for(as in 4:nrow(attributes_levels)){
for(bs in 3:nrow(attributes_levels)){
for(cs in 3:nrow(attributes_levels)){
for(ds in 5:nrow(attributes_levels)){
sdes = sort(c(as,bs, cs, ds))
nr_cards = 2*sum(sdes)
current_design = paste(as.character(sdes), collapse = "x")
if(!current_design %in% names(designcheck4)){
#print(nr_cards)
print(current_design)
exper= expand.grid(attributes_levels[1:as,1], attributes_levels[1:bs,2], attributes_levels[1:cs,3], attributes_levels[1:ds,4])
design2=caFactorialDesign(data=exper,type="orthogonal", seed = 42)
designcheck4[current_design]= nrow(design2)
print(nrow(design2))}
}}}}
set.seed(42)
library(conjoint) #version 1.41
library(dplyr)
library(ggplot2)
nr_att_and_lev = 6
attributes_levels = list()
for(l in 1:nr_att_and_lev){
attributes_levels[[l]] = paste0(letters[l], 1:nr_att_and_lev)
}
attributes_levels = as.data.frame(attributes_levels, col.names = LETTERS[1:nr_att_and_lev])
#source("C:/Users/hannesrosenbusch/Documents/introducing conjoint/conjoint app/hanneshelpers.R")
load("C:/Users/hannesrosenbusch/Documents/introducing conjoint/designcheck.RData")
designcheck4 = list()
for(as in 4:nrow(attributes_levels)){
for(bs in 3:nrow(attributes_levels)){
for(cs in 3:nrow(attributes_levels)){
for(ds in 5:nrow(attributes_levels)){
sdes = sort(c(as,bs, cs, ds))
nr_cards = 2*sum(sdes)
current_design = paste(as.character(sdes), collapse = "x")
if(!current_design %in% names(designcheck4)){
#print(nr_cards)
#print(current_design)
exper= expand.grid(attributes_levels[1:as,1], attributes_levels[1:bs,2], attributes_levels[1:cs,3], attributes_levels[1:ds,4])
print(exper)
design2=caFactorialDesign(data=exper,type="orthogonal", seed = 42)
designcheck4[current_design]= nrow(design2)
print(nrow(design2))}
}}}}
designcheck4 = list()
for(as in 3:nrow(attributes_levels)){
for(bs in 3:nrow(attributes_levels)){
for(cs in 4:nrow(attributes_levels)){
for(ds in 5:nrow(attributes_levels)){
sdes = sort(c(as,bs, cs, ds))
nr_cards = 2*sum(sdes)
current_design = paste(as.character(sdes), collapse = "x")
if(!current_design %in% names(designcheck4)){
#print(nr_cards)
#print(current_design)
exper= expand.grid(attributes_levels[1:as,1], attributes_levels[1:bs,2], attributes_levels[1:cs,3], attributes_levels[1:ds,4])
print(exper)
design2=caFactorialDesign(data=exper,type="orthogonal", seed = 42)
designcheck4[current_design]= nrow(design2)
print(nrow(design2))}
}}}}
designcheck4 = list()
for(as in 3:nrow(attributes_levels)){
for(bs in 3:nrow(attributes_levels)){
for(cs in 4:nrow(attributes_levels)){
for(ds in 5:nrow(attributes_levels)){
sdes = sort(c(as,bs, cs, ds))
nr_cards = 2*sum(sdes)
current_design = paste(as.character(sdes), collapse = "x")
if(!current_design %in% names(designcheck4)){
#print(nr_cards)
#print(current_design)
exper= expand.grid(attributes_levels[1:as,1], attributes_levels[1:bs,2], attributes_levels[1:cs,3], attributes_levels[1:ds,4])
print(exper)
design2=caFactorialDesign(data=exper,type="orthogonal", seed = 42)
designcheck4[current_design]= nrow(design2)
print(nrow(design2))}
}}}}
designcheck4 = list()
for(as in 3:nrow(attributes_levels)){
for(bs in 3:nrow(attributes_levels)){
for(cs in 4:nrow(attributes_levels)){
for(ds in 5:nrow(attributes_levels)){
sdes = sort(c(as,bs, cs, ds))
nr_cards = 2*sum(sdes)
current_design = paste(as.character(sdes), collapse = "x")
if(!current_design %in% names(designcheck4)){
#print(nr_cards)
#print(current_design)
exper= expand.grid(attributes_levels[1:as,1], attributes_levels[1:bs,2], attributes_levels[1:cs,3], attributes_levels[1:ds,4])
print(nrow(exper))
design2=caFactorialDesign(data=exper,type="orthogonal", seed = 42)
designcheck4[current_design]= nrow(design2)
print(nrow(design2))}
}}}}
designcheck4 = list()
for(as in 3:nrow(attributes_levels)){
for(bs in 3:nrow(attributes_levels)){
for(cs in 4:nrow(attributes_levels)){
for(ds in 5:nrow(attributes_levels)){
sdes = sort(c(as,bs, cs, ds))
nr_cards = 2*sum(sdes)
current_design = paste(as.character(sdes), collapse = "x")
if(!current_design %in% names(designcheck4)){
#print(nr_cards)
print(current_design)
exper= expand.grid(attributes_levels[1:as,1], attributes_levels[1:bs,2], attributes_levels[1:cs,3], attributes_levels[1:ds,4])
print(nrow(exper))
design2=caFactorialDesign(data=exper,type="orthogonal", seed = 42)
designcheck4[current_design]= nrow(design2)
print(nrow(design2))}
}}}}
beepr:beep()
designcheck4 = list()
for(as in 4:nrow(attributes_levels)){
for(bs in 3:nrow(attributes_levels)){
for(cs in 3:nrow(attributes_levels)){
for(ds in 5:nrow(attributes_levels)){
sdes = sort(c(as,bs, cs, ds))
nr_cards = 2*sum(sdes)
current_design = paste(as.character(sdes), collapse = "x")
if(!current_design %in% names(designcheck4)){
#print(nr_cards)
print(current_design)
exper= expand.grid(attributes_levels[1:as,1], attributes_levels[1:bs,2], attributes_levels[1:cs,3], attributes_levels[1:ds,4])
print(nrow(exper))
design2=caFactorialDesign(data=exper,type="orthogonal", seed = 42)
designcheck4[current_design]= nrow(design2)
print(nrow(design2))}
}}}}
designcheck4 = list()
for(as in 4:nrow(attributes_levels)){
for(bs in 3:nrow(attributes_levels)){
for(cs in 3:nrow(attributes_levels)){
for(ds in 5:nrow(attributes_levels)){
for(see in 1:10){
sdes = sort(c(as,bs, cs, ds))
nr_cards = 2*sum(sdes)
current_design = paste(as.character(sdes), collapse = "x")
if(!current_design %in% names(designcheck4)){
#print(nr_cards)
print(current_design)
exper= expand.grid(attributes_levels[1:as,1], attributes_levels[1:bs,2], attributes_levels[1:cs,3], attributes_levels[1:ds,4])
print(nrow(exper))
design2=caFactorialDesign(data=exper,type="orthogonal", seed = 42)
designcheck4[current_design]= nrow(design2)
print(nrow(design2))}
}
}}}}
designcheck4 = list()
for(as in 4:nrow(attributes_levels)){
for(bs in 3:nrow(attributes_levels)){
for(cs in 3:nrow(attributes_levels)){
for(ds in 5:nrow(attributes_levels)){
for(see in 1:10){
sdes = sort(c(as,bs, cs, ds))
nr_cards = 2*sum(sdes)
current_design = paste(as.character(sdes), collapse = "x")
if(!current_design %in% names(designcheck4)){
#print(nr_cards)
print(current_design)
exper= expand.grid(attributes_levels[1:as,1], attributes_levels[1:bs,2], attributes_levels[1:cs,3], attributes_levels[1:ds,4])
print(nrow(exper))
design2=caFactorialDesign(data=exper,type="orthogonal", seed = see)
designcheck4[current_design]= nrow(design2)
print(nrow(design2))}
}
}}}}
designcheck4 = list()
for(as in 4:nrow(attributes_levels)){
for(bs in 3:nrow(attributes_levels)){
for(cs in 3:nrow(attributes_levels)){
for(ds in 5:nrow(attributes_levels)){
for(see in 1:10){
sdes = sort(c(as,bs, cs, ds))
nr_cards = 2*sum(sdes)
current_design = paste(as.character(sdes), collapse = "x")
if(!current_design %in% names(designcheck4)){
#print(nr_cards)
print(current_design)
exper= expand.grid(attributes_levels[1:as,1], attributes_levels[1:bs,2], attributes_levels[1:cs,3], attributes_levels[1:ds,4])
print(nrow(exper))
design2=caFactorialDesign(data=exper,type="orthogonal", seed = see)
print(nrow(design2))}
}designcheck4[current_design]= nrow(design2)
}}}}
designcheck4 = list()
for(as in 4:nrow(attributes_levels)){
for(bs in 3:nrow(attributes_levels)){
for(cs in 3:nrow(attributes_levels)){
for(ds in 5:nrow(attributes_levels)){
for(see in 1:10){
sdes = sort(c(as,bs, cs, ds))
nr_cards = 2*sum(sdes)
current_design = paste(as.character(sdes), collapse = "x")
if(!current_design %in% names(designcheck4)){
#print(nr_cards)
print(current_design)
exper= expand.grid(attributes_levels[1:as,1], attributes_levels[1:bs,2], attributes_levels[1:cs,3], attributes_levels[1:ds,4])
print(nrow(exper))
design2=caFactorialDesign(data=exper,type="orthogonal", seed = see)
print(nrow(design2))}
}designcheck4[current_design]= nrow(design2)
}}}}
designcheck4 = list()
for(as in 4:nrow(attributes_levels)){
for(bs in 3:nrow(attributes_levels)){
for(cs in 3:nrow(attributes_levels)){
for(ds in 5:nrow(attributes_levels)){
for(see in 1:10){
sdes = sort(c(as,bs, cs, ds))
nr_cards = 2*sum(sdes)
current_design = paste(as.character(sdes), collapse = "x")
if(!current_design %in% names(designcheck4)){
#print(nr_cards)
print(current_design)
exper= expand.grid(attributes_levels[1:as,1], attributes_levels[1:bs,2], attributes_levels[1:cs,3], attributes_levels[1:ds,4])
print(nrow(exper))
design2=caFactorialDesign(data=exper,type="orthogonal", seed = see)
print(nrow(design2))}
}
#designcheck4[current_design]= nrow(design2)
}}}}
designcheck4 = list()
for(as in 3:nrow(attributes_levels)){
for(bs in 3:nrow(attributes_levels)){
for(cs in 4:nrow(attributes_levels)){
for(ds in 5:nrow(attributes_levels)){
for(see in 1:10){
sdes = sort(c(as,bs, cs, ds))
nr_cards = 2*sum(sdes)
current_design = paste(as.character(sdes), collapse = "x")
if(!current_design %in% names(designcheck4)){
#print(nr_cards)
print(current_design)
exper= expand.grid(attributes_levels[1:as,1], attributes_levels[1:bs,2], attributes_levels[1:cs,3], attributes_levels[1:ds,4])
print(nrow(exper))
design2=caFactorialDesign(data=exper,type="orthogonal", seed = see)
print(nrow(design2))}
}
#designcheck4[current_design]= nrow(design2)
}}}}
design2
designcheck4 = list()
for(as in 3:nrow(attributes_levels)){
for(bs in 3:nrow(attributes_levels)){
for(cs in 4:nrow(attributes_levels)){
for(ds in 5:nrow(attributes_levels)){
for(see in 1:10){
sdes = sort(c(as,bs, cs, ds))
nr_cards = 2*sum(sdes)
current_design = paste(as.character(sdes), collapse = "x")
if(!current_design %in% names(designcheck4)){
#print(nr_cards)
print(current_design)
exper= expand.grid(attributes_levels[1:as,1], attributes_levels[1:bs,2], attributes_levels[1:cs,3], attributes_levels[1:ds,4])
print(nrow(exper))
design2=caFactorialDesign(data=exper,type="orthogonal", seed = 42)
print(nrow(design2))}
}
#designcheck4[current_design]= nrow(design2)
}}}}
runApp('introducing conjoint/conjoint app')
runApp('introducing conjoint/conjoint app')
runApp('introducing conjoint/conjoint app')
runApp('introducing conjoint/conjoint app')
runApp('introducing conjoint/conjoint app')
runApp('introducing conjoint/conjoint app')
runApp('introducing conjoint/conjoint app')
runApp('introducing conjoint/conjoint app')
runApp('introducing conjoint/conjoint app')
runApp('introducing conjoint/conjoint app')
#install.packages('rsconnect')
library(rsconnect)
setwd("C:/Users/hannesrosenbusch/Documents/introducing conjoint")
rsconnect::setAccountInfo(name='rosenbusch',
token='AE3BBCC32B976AD16AA02B48CC7236DA',
secret='kBV5TmoWia6b4bk/kQGyy9sKghNVXz2f+3aBYiLx')
rsconnect::deployApp('conjoint app')
shiny::runApp('conjoint app')
runApp('conjoint app')
#install.packages('rsconnect')
library(rsconnect)
setwd("C:/Users/hannesrosenbusch/Documents/introducing conjoint")
rsconnect::setAccountInfo(name='rosenbusch',
token='AE3BBCC32B976AD16AA02B48CC7236DA',
secret='kBV5TmoWia6b4bk/kQGyy9sKghNVXz2f+3aBYiLx')
rsconnect::deployApp('conjoint app')
#install.packages('rsconnect')
library(rsconnect)
setwd("C:/Users/hannesrosenbusch/Documents/introducing conjoint")
rsconnect::setAccountInfo(name='rosenbusch',
token='AE3BBCC32B976AD16AA02B48CC7236DA',
secret='kBV5TmoWia6b4bk/kQGyy9sKghNVXz2f+3aBYiLx')
rsconnect::deployApp('conjoint app')
