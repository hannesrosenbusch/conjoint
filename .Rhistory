if((prev_r_index+1)==reduced_nr_levels[i]){
beta_ref =  0 - betas_non_ref                                       #3500
}else{
beta_ref = 0 - apply(betas_non_ref,2,sum)}
betas_attr = rbind(betas_non_ref, beta_ref )
start = ifelse(i == 1, 1, cs_nrlevels[i-1]+1)
rownames(betas_attr) = all_levels[start:(cs_nrlevels[i])]
comparisons = combn(rownames(betas_attr), 2)
for(c in 1:ncol(comparisons)){
comp = comparisons[,c]
percen = round(sum(betas_attr[comp[1],] > betas_attr[comp[2],])/ncol(betas_attr) *100, 1)
if(percen < 50){
percen = 100 - percen
within_attribute_beta_comparisons[paste(comp[2], ">", comp[1])] = percen
}else{
within_attribute_beta_comparisons[paste(comp[1], ">", comp[2])] = percen
}}
prev_r_index = reduced_nr_levels[i]
prev_index = cs_nrlevels[i]}
within_attribute_beta_comparisons
data.frame(within_attribute_beta_comparisons)
data.frame(within_attribute_beta_comparisons)
t(data.frame(within_attribute_beta_comparisons))
names(within_attribute_beta_comparisons))
names(within_attribute_beta_comparisons)
within_attribute_beta_comparisons = data.frame(matrix(ncol = 1, nrow = 0)
prev_index = 1
prev_r_index = 0
reduced_nr_levels = cumsum(nr_levels -1)
cs_nrlevels = cumsum(nr_levels)
within_attribute_beta_comparisons = data.frame(matrix(ncol = 1, nrow = 0)
for(i in 1:length(nr_levels)){
betas_non_ref = avg_betas_draws[(prev_r_index+1):(reduced_nr_levels[i]),] #2, 3500
if((prev_r_index+1)==reduced_nr_levels[i]){
beta_ref =  0 - betas_non_ref                                       #3500
}else{
beta_ref = 0 - apply(betas_non_ref,2,sum)}
betas_attr = rbind(betas_non_ref, beta_ref )
start = ifelse(i == 1, 1, cs_nrlevels[i-1]+1)
rownames(betas_attr) = all_levels[start:(cs_nrlevels[i])]
comparisons = combn(rownames(betas_attr), 2)
for(c in 1:ncol(comparisons)){
comp = comparisons[,c]
percen = round(sum(betas_attr[comp[1],] > betas_attr[comp[2],])/ncol(betas_attr) *100, 1)
if(percen < 50){
percen = 100 - percen
within_attribute_beta_comparisons[paste(comp[2], ">", comp[1])] = percen
}else{
within_attribute_beta_comparisons[paste(comp[1], ">", comp[2])] = percen
}}
prev_r_index = reduced_nr_levels[i]
prev_index = cs_nrlevels[i]}
prev_index = 1
prev_r_index = 0
reduced_nr_levels = cumsum(nr_levels -1)
cs_nrlevels = cumsum(nr_levels)
within_attribute_beta_comparisons = data.frame(matrix(ncol = 1, nrow = 0))
for(i in 1:length(nr_levels)){
betas_non_ref = avg_betas_draws[(prev_r_index+1):(reduced_nr_levels[i]),] #2, 3500
if((prev_r_index+1)==reduced_nr_levels[i]){
beta_ref =  0 - betas_non_ref                                       #3500
}else{
beta_ref = 0 - apply(betas_non_ref,2,sum)}
betas_attr = rbind(betas_non_ref, beta_ref )
start = ifelse(i == 1, 1, cs_nrlevels[i-1]+1)
rownames(betas_attr) = all_levels[start:(cs_nrlevels[i])]
comparisons = combn(rownames(betas_attr), 2)
for(c in 1:ncol(comparisons)){
comp = comparisons[,c]
percen = round(sum(betas_attr[comp[1],] > betas_attr[comp[2],])/ncol(betas_attr) *100, 1)
if(percen < 50){
percen = 100 - percen
within_attribute_beta_comparisons[paste(comp[2], ">", comp[1])] = percen
}else{
within_attribute_beta_comparisons[paste(comp[1], ">", comp[2])] = percen
}}
prev_r_index = reduced_nr_levels[i]
prev_index = cs_nrlevels[i]}
prev_index = 1
prev_r_index = 0
reduced_nr_levels = cumsum(nr_levels -1)
cs_nrlevels = cumsum(nr_levels)
within_attribute_beta_comparisons = data.frame(matrix(ncol = 0, nrow = 1))
for(i in 1:length(nr_levels)){
betas_non_ref = avg_betas_draws[(prev_r_index+1):(reduced_nr_levels[i]),] #2, 3500
if((prev_r_index+1)==reduced_nr_levels[i]){
beta_ref =  0 - betas_non_ref                                       #3500
}else{
beta_ref = 0 - apply(betas_non_ref,2,sum)}
betas_attr = rbind(betas_non_ref, beta_ref )
start = ifelse(i == 1, 1, cs_nrlevels[i-1]+1)
rownames(betas_attr) = all_levels[start:(cs_nrlevels[i])]
comparisons = combn(rownames(betas_attr), 2)
for(c in 1:ncol(comparisons)){
comp = comparisons[,c]
percen = round(sum(betas_attr[comp[1],] > betas_attr[comp[2],])/ncol(betas_attr) *100, 1)
if(percen < 50){
percen = 100 - percen
within_attribute_beta_comparisons[paste(comp[2], ">", comp[1])] = percen
}else{
within_attribute_beta_comparisons[paste(comp[1], ">", comp[2])] = percen
}}
prev_r_index = reduced_nr_levels[i]
prev_index = cs_nrlevels[i]}
within_attribute_beta_comparisons
t(within_attribute_beta_comparisons)
prev_index = 1
prev_r_index = 0
reduced_nr_levels = cumsum(nr_levels -1)
cs_nrlevels = cumsum(nr_levels)
within_attribute_beta_comparisons = data.frame(matrix(ncol = 0, nrow = 1))
for(i in 1:length(nr_levels)){
betas_non_ref = avg_betas_draws[(prev_r_index+1):(reduced_nr_levels[i]),] #2, 3500
if((prev_r_index+1)==reduced_nr_levels[i]){
beta_ref =  0 - betas_non_ref                                       #3500
}else{
beta_ref = 0 - apply(betas_non_ref,2,sum)}
betas_attr = rbind(betas_non_ref, beta_ref )
start = ifelse(i == 1, 1, cs_nrlevels[i-1]+1)
rownames(betas_attr) = all_levels[start:(cs_nrlevels[i])]
comparisons = combn(rownames(betas_attr), 2)
for(c in 1:ncol(comparisons)){
comp = comparisons[,c]
percen = round(sum(betas_attr[comp[1],] > betas_attr[comp[2],])/ncol(betas_attr) *100, 1)
if(percen < 50){
percen = 100 - percen
within_attribute_beta_comparisons[paste(comp[2], ">", comp[1])] = paste0(percen, "%")
}else{
within_attribute_beta_comparisons[paste(comp[1], ">", comp[2])] = paste0(percen, "%")
}}
prev_r_index = reduced_nr_levels[i]
prev_index = cs_nrlevels[i]}
within_attribute_beta_comparisons = t(within_attribute_beta_comparisons)
within_attribute_beta_comparisons
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages("DoE.base")
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
runApp()
library(DoE.base)
oa.design(factor.names = list(c("as","abb", "ssd"), c("fsf", "fgfg", "fdfdf"), c("opop", "oii")))
mtcars
d = mtcars[1:3,1:3]
oa.design(factor.names = list(d)
)
d
as.list(d)
oa.design(factor.names = as.list(d))
l = as.list(d)
l = as.list(d[d!=4])
l
l = as.list(d)
removeListElemComplete = function(inlist, elem_remove) {
outlist = lapply(inlist, removeListElem, elem_remove = elem_remove)
outlist[lengths(outlist) > 0]
}
removeListElemComplete(l, 6)
removeListElem <- function(inlist,elem_remove){
outlist = lapply(inlist,setdiff,elem_remove)
outlist[lengths(outlist) > 0]
}
removeListElemComplete(l, 6)
l
k = removeListElemComplete(l, 6)
k
unlist(k)
dim(k)
length(k)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
load("designchecks.Rdata")
test = data.frame(matrix(data = "val", nrow = 5, ncol = 4))
test[4:5,3] = NA
test[4:5,1] = NA
current_and_alternative_designs(test)
load("designchecks.Rdata")
test = data.frame(matrix(data = "val", nrow = 5, ncol = 3))
test[4:5,3] = NA
test[3:5,1] = NA
current_and_alternative_designs(test)
test
test = data.frame(matrix(data = "val", nrow = 4, ncol = 3))
test[4,3] = NA
test[3:4,1] = NA
current_and_alternative_designs(test)
test
test = data.frame(matrix(data = "val", nrow = 4, ncol = 3))
test[4,3] = ""
test[3:4,1] = ""
current_and_alternative_designs(test)
dm_list = as.list(test)
dm_list = removeListElemComplete(dm_list, "")
ddd = oa.design(factor.names =  dm_list)
test
test = data.frame(matrix(data = 1:3, nrow = 4, ncol = 3))
test[4,3] = ""
test[3:4,1] = ""
test
current_and_alternative_designs(test)
dm_list = as.list(test)
dm_list = removeListElemComplete(dm_list, "")
ddd = oa.design(factor.names =  dm_list)
load("designchecks.Rdata")
test = data.frame(matrix(data = 1:4, nrow = 4, ncol = 3))
test[4,3] = ""
test[3:4,1] = ""
current_and_alternative_designs(test)
dm_list = as.list(test)
dm_list = removeListElemComplete(dm_list, "")
ddd = oa.design(factor.names =  dm_list)
ddd
rowSums(test=="")
colSums(test=="")
nrow(test) - colSums(test=="")
h = nrow(test) - colSums(test=="")
ddd = oa.design(nlevels =  h)
ddd
ddd = oa.design(nlevels =  c(5,5,5,5,5))
ddd
ddd = oa.design(nlevels =  c(3,4,2))
show.oas()
show.oas(show = "all")
ddd$type
attributes(ddd)
ddd$design.info$type
ddd$design.info
attributes(ddd)$design.info
attributes(ddd)$design.info$type
ddd = oa.design(nlevels =  c(4,4,2))
attributes(ddd)$design.info$type
ddd
ddd = oa.design(nlevels =  c(4,4,2), columns = "min3")
ddd
attributes(ddd)$design.info$type
ddd = oa.design(factor.names = dm_list, columns = "min3")
dm_list
attributes(ddd)$design.info$type
test
ddd = oa.design(nlevels = c(2,4,3))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
attributes(ddd)$design.info$type
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
set.seed(42)
library(conjoint) #version 1.41
library(dplyr)
library(ggplot2)
nr_att_and_lev = 6
attributes_levels = list()
for(l in 1:nr_att_and_lev){
attributes_levels[[l]] = paste0(letters[l], 1:nr_att_and_lev)
}
attributes_levels = as.data.frame(attributes_levels, col.names = LETTERS[1:nr_att_and_lev])
#source("C:/Users/hannesrosenbusch/Documents/introducing conjoint/conjoint app/hanneshelpers.R")
load("C:/Users/hannesrosenbusch/Documents/introducing conjoint/designcheck.RData")
designcheck4 = list()
for(as in 2:nrow(attributes_levels)){
for(bs in 2:nrow(attributes_levels)){
for(cs in 2:nrow(attributes_levels)){
for(ds in 2:nrow(attributes_levels)){
sdes = sort(c(as,bs, cs, ds))
nr_cards = 2*sum(sdes)
current_design = paste(as.character(sdes), collapse = "x")
if(!current_design %in% names(designcheck4)){
#print(nr_cards)
print(current_design)
exper= expand.grid(attributes_levels[1:as,1], attributes_levels[1:bs,2], attributes_levels[1:cs,3], attributes_levels[1:ds,4])
print(nrow(exper))
design2=caFactorialDesign(data=exper,type="orthogonal", seed = 42)
print(nrow(design2))
designcheck4[current_design]= nrow(design2)
}}}}}
beepr:beep()
save(designcheck4, file = "designcheck4.RData")
rm(list=ls())
load("C:/Users/hannesrosenbusch/Documents/introducing conjoint/designcheck2.RData")
setwd("~/introducing conjoint")
load("C:/Users/hannesrosenbusch/Documents/introducing conjoint/designcheck2.RData")
load("C:/Users/hannesrosenbusch/Documents/introducing conjoint/designcheck4.RData")
set.seed(42)
library(conjoint) #version 1.41
library(dplyr)
library(ggplot2)
nr_att_and_lev = 6
attributes_levels = list()
for(l in 1:nr_att_and_lev){
attributes_levels[[l]] = paste0(letters[l], 1:nr_att_and_lev)
}
attributes_levels = as.data.frame(attributes_levels, col.names = LETTERS[1:nr_att_and_lev])
#source("C:/Users/hannesrosenbusch/Documents/introducing conjoint/conjoint app/hanneshelpers.R")
load("C:/Users/hannesrosenbusch/Documents/introducing conjoint/designcheck.RData")
designcheck2 = list()
for(as in 2:nrow(attributes_levels)){
for(bs in 2:nrow(attributes_levels)){
sdes = sort(c(as,bs))
nr_cards = 2*sum(sdes)
current_design = paste(as.character(sdes), collapse = "x")
if(!current_design %in% names(designcheck2)){
#print(nr_cards)
print(current_design)
exper= expand.grid(attributes_levels[1:as,1], attributes_levels[1:bs,2])
print(nrow(exper))
design2=caFactorialDesign(data=exper,type="orthogonal", seed = 42)
print(nrow(design2))
designcheck2[current_design]= nrow(design2)
}}}
beepr:beep()
rm(list=ls())
load("C:/Users/hannesrosenbusch/Documents/introducing conjoint/designcheck2.RData")
save(designcheck2, file = "designcheck2.RData")
set.seed(42)
library(conjoint) #version 1.41
library(dplyr)
library(ggplot2)
nr_att_and_lev = 6
attributes_levels = list()
for(l in 1:nr_att_and_lev){
attributes_levels[[l]] = paste0(letters[l], 1:nr_att_and_lev)
}
attributes_levels = as.data.frame(attributes_levels, col.names = LETTERS[1:nr_att_and_lev])
#source("C:/Users/hannesrosenbusch/Documents/introducing conjoint/conjoint app/hanneshelpers.R")
load("C:/Users/hannesrosenbusch/Documents/introducing conjoint/designcheck.RData")
designcheck2 = list()
for(as in 2:nrow(attributes_levels)){
for(bs in 2:nrow(attributes_levels)){
sdes = sort(c(as,bs))
nr_cards = 2*sum(sdes)
current_design = paste(as.character(sdes), collapse = "x")
if(!current_design %in% names(designcheck2)){
#print(nr_cards)
print(current_design)
exper= expand.grid(attributes_levels[1:as,1], attributes_levels[1:bs,2])
print(nrow(exper))
design2=caFactorialDesign(data=exper,type="orthogonal", seed = 42)
print(nrow(design2))
designcheck2[current_design]= nrow(design2)
}}}
beepr:beep()
save(designcheck2, file = "designcheck2.RData")
rm(list=ls())
set.seed(42)
library(conjoint) #version 1.41
library(dplyr)
library(ggplot2)
nr_att_and_lev = 6
attributes_levels = list()
for(l in 1:nr_att_and_lev){
attributes_levels[[l]] = paste0(letters[l], 1:nr_att_and_lev)
}
attributes_levels = as.data.frame(attributes_levels, col.names = LETTERS[1:nr_att_and_lev])
#source("C:/Users/hannesrosenbusch/Documents/introducing conjoint/conjoint app/hanneshelpers.R")
load("C:/Users/hannesrosenbusch/Documents/introducing conjoint/designcheck.RData")
designcheck2 = list()
for(as in 2:nrow(attributes_levels)){
for(bs in 2:nrow(attributes_levels)){
sdes = sort(c(as,bs))
nr_cards = 2*sum(sdes)
current_design = paste(as.character(sdes), collapse = "x")
if(!current_design %in% names(designcheck2)){
#print(nr_cards)
print(current_design)
exper= expand.grid(attributes_levels[1:as,1], attributes_levels[1:bs,2])
print(nrow(exper))
design2=caFactorialDesign(data=exper,type="orthogonal", seed = 42)
print(nrow(design2))
designcheck2[current_design]= nrow(design2)
}}}
save(designcheck2, file = "designcheck2.RData")
rm(list=ls())
load("C:/Users/hannesrosenbusch/Documents/introducing conjoint/designcheck2.RData")
load("C:/Users/hannesrosenbusch/Documents/introducing conjoint/designcheck3.RData")
load("C:/Users/hannesrosenbusch/Documents/introducing conjoint/designcheck4.RData")
load("C:/Users/hannesrosenbusch/Documents/introducing conjoint/designcheck5.RData")
designchecks = c(designcheck2[order(names(designcheck2))],designcheck3[order(names(designcheck3))], designcheck4[order(names(designcheck4))], designcheck[order(names(designcheck))])
save(designchecks, file = "designchecks.Rdata")
load("designchecks.Rdata")
load("oa_designchecks.Rdata")
all_designchecks =  c(designchecks, oa_designchecks)
View(all_designchecks)
for(dupes in names(all_designchecks)[duplicated(names(all_designchecks))]){
candidates = all_designchecks[names(all_designchecks) == dupes]
all_designchecks[names(all_designchecks) == dupes] = candidates[which.min(candidates)]
print(all_designchecks[names(all_designchecks) == dupes])
}
all_designchecks=all_designchecks[!duplicated(names(all_designchecks))]
View(all_designchecks)
View(designcheck2)
View(designcheck3)
View(designcheck4)
View(designchecks)
load("C:/Users/hannesrosenbusch/Documents/introducing conjoint/designcheck5.RData")
rm(list=ls())
load("C:/Users/hannesrosenbusch/Documents/introducing conjoint/designcheck5.RData")
load("designchecks.Rdata")
load("oa_designchecks.Rdata")
all_designchecks =  c(designchecks, oa_designchecks)
for(dupes in names(all_designchecks)[duplicated(names(all_designchecks))]){
candidates = all_designchecks[names(all_designchecks) == dupes]
all_designchecks[names(all_designchecks) == dupes] = candidates[which.min(candidates)]
print(all_designchecks[names(all_designchecks) == dupes])
}
all_designchecks=all_designchecks[!duplicated(names(all_designchecks))]
save(all_designchecks, file = "all_designchecks.RData")
